// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v3.21.12
// source: protos/payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "";

export interface Empty {
}

export interface UserId {
  id: number;
}

export interface Payment {
  senderId: number;
  receiverId: number;
  amount: number;
  currency: string;
}

export interface PaymentResponse {
  id: number;
  senderId: number;
  receiverId: number;
  amount: number;
  currency: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Balance {
  userId: number;
  balance: number;
  currency: string;
}

export interface PaymentList {
  payments: Payment[];
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseUserId(): UserId {
  return { id: 0 };
}

export const UserId: MessageFns<UserId> = {
  encode(message: UserId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserId {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: UserId): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserId>, I>>(base?: I): UserId {
    return UserId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserId>, I>>(object: I): UserId {
    const message = createBaseUserId();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBasePayment(): Payment {
  return { senderId: 0, receiverId: 0, amount: 0, currency: "" };
}

export const Payment: MessageFns<Payment> = {
  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderId !== 0) {
      writer.uint32(8).int32(message.senderId);
    }
    if (message.receiverId !== 0) {
      writer.uint32(16).int32(message.receiverId);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.senderId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.receiverId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      senderId: isSet(object.senderId) ? globalThis.Number(object.senderId) : 0,
      receiverId: isSet(object.receiverId) ? globalThis.Number(object.receiverId) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.senderId !== 0) {
      obj.senderId = Math.round(message.senderId);
    }
    if (message.receiverId !== 0) {
      obj.receiverId = Math.round(message.receiverId);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payment>, I>>(base?: I): Payment {
    return Payment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payment>, I>>(object: I): Payment {
    const message = createBasePayment();
    message.senderId = object.senderId ?? 0;
    message.receiverId = object.receiverId ?? 0;
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    return message;
  },
};

function createBasePaymentResponse(): PaymentResponse {
  return { id: 0, senderId: 0, receiverId: 0, amount: 0, currency: "", createdAt: undefined, updatedAt: undefined };
}

export const PaymentResponse: MessageFns<PaymentResponse> = {
  encode(message: PaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.senderId !== 0) {
      writer.uint32(16).int32(message.senderId);
    }
    if (message.receiverId !== 0) {
      writer.uint32(24).int32(message.receiverId);
    }
    if (message.amount !== 0) {
      writer.uint32(32).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(42).string(message.currency);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.senderId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.receiverId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      senderId: isSet(object.senderId) ? globalThis.Number(object.senderId) : 0,
      receiverId: isSet(object.receiverId) ? globalThis.Number(object.receiverId) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: PaymentResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.senderId !== 0) {
      obj.senderId = Math.round(message.senderId);
    }
    if (message.receiverId !== 0) {
      obj.receiverId = Math.round(message.receiverId);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentResponse>, I>>(base?: I): PaymentResponse {
    return PaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentResponse>, I>>(object: I): PaymentResponse {
    const message = createBasePaymentResponse();
    message.id = object.id ?? 0;
    message.senderId = object.senderId ?? 0;
    message.receiverId = object.receiverId ?? 0;
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseBalance(): Balance {
  return { userId: 0, balance: 0, currency: "" };
}

export const Balance: MessageFns<Balance> = {
  encode(message: Balance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.balance !== 0) {
      writer.uint32(16).int32(message.balance);
    }
    if (message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Balance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.balance = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Balance {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      balance: isSet(object.balance) ? globalThis.Number(object.balance) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
    };
  },

  toJSON(message: Balance): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.balance !== 0) {
      obj.balance = Math.round(message.balance);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Balance>, I>>(base?: I): Balance {
    return Balance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Balance>, I>>(object: I): Balance {
    const message = createBaseBalance();
    message.userId = object.userId ?? 0;
    message.balance = object.balance ?? 0;
    message.currency = object.currency ?? "";
    return message;
  },
};

function createBasePaymentList(): PaymentList {
  return { payments: [] };
}

export const PaymentList: MessageFns<PaymentList> = {
  encode(message: PaymentList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.payments) {
      Payment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payments.push(Payment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentList {
    return {
      payments: globalThis.Array.isArray(object?.payments) ? object.payments.map((e: any) => Payment.fromJSON(e)) : [],
    };
  },

  toJSON(message: PaymentList): unknown {
    const obj: any = {};
    if (message.payments?.length) {
      obj.payments = message.payments.map((e) => Payment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentList>, I>>(base?: I): PaymentList {
    return PaymentList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentList>, I>>(object: I): PaymentList {
    const message = createBasePaymentList();
    message.payments = object.payments?.map((e) => Payment.fromPartial(e)) || [];
    return message;
  },
};

export type PaymentServiceService = typeof PaymentServiceService;
export const PaymentServiceService = {
  getAllPaymentByUserId: {
    path: "/PaymentService/GetAllPaymentByUserId",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserId) => Buffer.from(UserId.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserId.decode(value),
    responseSerialize: (value: PaymentList) => Buffer.from(PaymentList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PaymentList.decode(value),
  },
  makePayment: {
    path: "/PaymentService/MakePayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Payment) => Buffer.from(Payment.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Payment.decode(value),
    responseSerialize: (value: PaymentResponse) => Buffer.from(PaymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PaymentResponse.decode(value),
  },
} as const;

export interface PaymentServiceServer extends UntypedServiceImplementation {
  getAllPaymentByUserId: handleUnaryCall<UserId, PaymentList>;
  makePayment: handleUnaryCall<Payment, PaymentResponse>;
}

export interface PaymentServiceClient extends Client {
  getAllPaymentByUserId(
    request: UserId,
    callback: (error: ServiceError | null, response: PaymentList) => void,
  ): ClientUnaryCall;
  getAllPaymentByUserId(
    request: UserId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PaymentList) => void,
  ): ClientUnaryCall;
  getAllPaymentByUserId(
    request: UserId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PaymentList) => void,
  ): ClientUnaryCall;
  makePayment(
    request: Payment,
    callback: (error: ServiceError | null, response: PaymentResponse) => void,
  ): ClientUnaryCall;
  makePayment(
    request: Payment,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PaymentResponse) => void,
  ): ClientUnaryCall;
  makePayment(
    request: Payment,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PaymentResponse) => void,
  ): ClientUnaryCall;
}

export const PaymentServiceClient = makeGenericClientConstructor(
  PaymentServiceService,
  "PaymentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PaymentServiceClient;
  service: typeof PaymentServiceService;
  serviceName: string;
};

export type BalanceServiceService = typeof BalanceServiceService;
export const BalanceServiceService = {
  addBalance: {
    path: "/BalanceService/AddBalance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Balance) => Buffer.from(Balance.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Balance.decode(value),
    responseSerialize: (value: Balance) => Buffer.from(Balance.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Balance.decode(value),
  },
  getBalanceByUserId: {
    path: "/BalanceService/GetBalanceByUserId",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserId) => Buffer.from(UserId.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserId.decode(value),
    responseSerialize: (value: Balance) => Buffer.from(Balance.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Balance.decode(value),
  },
} as const;

export interface BalanceServiceServer extends UntypedServiceImplementation {
  addBalance: handleUnaryCall<Balance, Balance>;
  getBalanceByUserId: handleUnaryCall<UserId, Balance>;
}

export interface BalanceServiceClient extends Client {
  addBalance(request: Balance, callback: (error: ServiceError | null, response: Balance) => void): ClientUnaryCall;
  addBalance(
    request: Balance,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Balance) => void,
  ): ClientUnaryCall;
  addBalance(
    request: Balance,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Balance) => void,
  ): ClientUnaryCall;
  getBalanceByUserId(
    request: UserId,
    callback: (error: ServiceError | null, response: Balance) => void,
  ): ClientUnaryCall;
  getBalanceByUserId(
    request: UserId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Balance) => void,
  ): ClientUnaryCall;
  getBalanceByUserId(
    request: UserId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Balance) => void,
  ): ClientUnaryCall;
}

export const BalanceServiceClient = makeGenericClientConstructor(
  BalanceServiceService,
  "BalanceService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BalanceServiceClient;
  service: typeof BalanceServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
