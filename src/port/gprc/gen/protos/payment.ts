// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.28.1
// source: protos/payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface Empty {
}

export interface UserId {
  id: string;
}

export interface Payment {
  senderId: UserId | undefined;
  receiverId: UserId | undefined;
  price: number;
  note: string;
}

export interface PaymentRequest {
  paymentDetail: Payment | undefined;
}

export interface PaymentList {
  payment: Payment[];
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseUserId(): UserId {
  return { id: "" };
}

export const UserId: MessageFns<UserId> = {
  encode(message: UserId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserId {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: UserId): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserId>, I>>(base?: I): UserId {
    return UserId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserId>, I>>(object: I): UserId {
    const message = createBaseUserId();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePayment(): Payment {
  return { senderId: undefined, receiverId: undefined, price: 0, note: "" };
}

export const Payment: MessageFns<Payment> = {
  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderId !== undefined) {
      UserId.encode(message.senderId, writer.uint32(10).fork()).join();
    }
    if (message.receiverId !== undefined) {
      UserId.encode(message.receiverId, writer.uint32(18).fork()).join();
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    if (message.note !== "") {
      writer.uint32(34).string(message.note);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderId = UserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receiverId = UserId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.note = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      senderId: isSet(object.senderId) ? UserId.fromJSON(object.senderId) : undefined,
      receiverId: isSet(object.receiverId) ? UserId.fromJSON(object.receiverId) : undefined,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.senderId !== undefined) {
      obj.senderId = UserId.toJSON(message.senderId);
    }
    if (message.receiverId !== undefined) {
      obj.receiverId = UserId.toJSON(message.receiverId);
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payment>, I>>(base?: I): Payment {
    return Payment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payment>, I>>(object: I): Payment {
    const message = createBasePayment();
    message.senderId = (object.senderId !== undefined && object.senderId !== null)
      ? UserId.fromPartial(object.senderId)
      : undefined;
    message.receiverId = (object.receiverId !== undefined && object.receiverId !== null)
      ? UserId.fromPartial(object.receiverId)
      : undefined;
    message.price = object.price ?? 0;
    message.note = object.note ?? "";
    return message;
  },
};

function createBasePaymentRequest(): PaymentRequest {
  return { paymentDetail: undefined };
}

export const PaymentRequest: MessageFns<PaymentRequest> = {
  encode(message: PaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentDetail !== undefined) {
      Payment.encode(message.paymentDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentDetail = Payment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentRequest {
    return { paymentDetail: isSet(object.paymentDetail) ? Payment.fromJSON(object.paymentDetail) : undefined };
  },

  toJSON(message: PaymentRequest): unknown {
    const obj: any = {};
    if (message.paymentDetail !== undefined) {
      obj.paymentDetail = Payment.toJSON(message.paymentDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentRequest>, I>>(base?: I): PaymentRequest {
    return PaymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentRequest>, I>>(object: I): PaymentRequest {
    const message = createBasePaymentRequest();
    message.paymentDetail = (object.paymentDetail !== undefined && object.paymentDetail !== null)
      ? Payment.fromPartial(object.paymentDetail)
      : undefined;
    return message;
  },
};

function createBasePaymentList(): PaymentList {
  return { payment: [] };
}

export const PaymentList: MessageFns<PaymentList> = {
  encode(message: PaymentList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.payment) {
      Payment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payment.push(Payment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentList {
    return {
      payment: globalThis.Array.isArray(object?.payment) ? object.payment.map((e: any) => Payment.fromJSON(e)) : [],
    };
  },

  toJSON(message: PaymentList): unknown {
    const obj: any = {};
    if (message.payment?.length) {
      obj.payment = message.payment.map((e) => Payment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentList>, I>>(base?: I): PaymentList {
    return PaymentList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentList>, I>>(object: I): PaymentList {
    const message = createBasePaymentList();
    message.payment = object.payment?.map((e) => Payment.fromPartial(e)) || [];
    return message;
  },
};

export type PaymentServiceService = typeof PaymentServiceService;
export const PaymentServiceService = {
  getAllPaymentByUserId: {
    path: "/PaymentService/GetAllPaymentByUserId",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserId) => Buffer.from(UserId.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserId.decode(value),
    responseSerialize: (value: PaymentList) => Buffer.from(PaymentList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PaymentList.decode(value),
  },
  makePayment: {
    path: "/PaymentService/MakePayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PaymentRequest) => Buffer.from(PaymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PaymentRequest.decode(value),
    responseSerialize: (value: Payment) => Buffer.from(Payment.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Payment.decode(value),
  },
} as const;

export interface PaymentServiceServer extends UntypedServiceImplementation {
  getAllPaymentByUserId: handleUnaryCall<UserId, PaymentList>;
  makePayment: handleUnaryCall<PaymentRequest, Payment>;
}

export interface PaymentServiceClient extends Client {
  getAllPaymentByUserId(
    request: UserId,
    callback: (error: ServiceError | null, response: PaymentList) => void,
  ): ClientUnaryCall;
  getAllPaymentByUserId(
    request: UserId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PaymentList) => void,
  ): ClientUnaryCall;
  getAllPaymentByUserId(
    request: UserId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PaymentList) => void,
  ): ClientUnaryCall;
  makePayment(
    request: PaymentRequest,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  makePayment(
    request: PaymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  makePayment(
    request: PaymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
}

export const PaymentServiceClient = makeGenericClientConstructor(
  PaymentServiceService,
  "PaymentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PaymentServiceClient;
  service: typeof PaymentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
